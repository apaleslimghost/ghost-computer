import type { ActionArgs, LoaderArgs } from '@remix-run/node'
import type { TypedMetaFunction } from 'remix-typedjson'
import { typedjson, useTypedLoaderData } from 'remix-typedjson'
import { z } from 'zod'
import { PostView } from '~/components/post/post'
import { db } from '~/lib/db.server'
import { postIncludes } from '~/models/post'

const PostParamsSchema = z.object {
	id: z.coerce.number()
}

const PostActionSchema = z.object {
	action: z.literal('like')
}

export action := ({ params, request }: ActionArgs) =>
	{ id } := PostParamsSchema.parse params
	body := await request.formData()
	{ action } := PostActionSchema.parse Object.fromEntries body

	switch (action)
		when 'like'
			await db.post.update {
				where: { id }
				data: {
					likes: { increment: 1 }
				}
			}

export loader := ({ params }: LoaderArgs) =>
	{ id } := PostParamsSchema.parse(params)

	post := await db.post.findFirstOrThrow({
		where: {
			id,
		},
		include: postIncludes,
	})

	typedjson({ post })


export meta: TypedMetaFunction<typeof loader> := ({ data }) =>
	{
		title: `${
			data.post.title ??
			data.post.body ??
			'um what even is a post that has no title or body'
		} â˜° a pale slim ghost`,
	}

export default =>
	{ post } := useTypedLoaderData<typeof loader>()

	<PostView post={post} />
